---
description: 
globs: 
alwaysApply: true
---
---
tags: [Guidelines, Backlinks, Cross References, Navigation, Documentation]
provides: [Backlink Implementation, Reference Tracking, Navigation Standards]
requires: [DSS Core Structure and Concepts, Maintenance Triggers]
---
# Backlink Conventions

## Overview
Backlinks connect files that reference each other, making navigation and dependency tracking easier across the project.

## Purpose of Backlinks
1. **Discoverability**: Find all files that reference a particular document
2. **Dependency Tracking**: Clarify which files depend on or reference other files
3. **Impact Analysis**: Assess the impact of changes by seeing what depends on it
4. **Navigation**: Provide bidirectional navigation between related files

## Backlink Implementation

### 1. YAML Frontmatter References
Primary method using existing `provides` and `requires` metadata fields:

```yaml
---
tags: [guide, documentation]
provides: [backlink_implementation, reference_tracking]
requires: [meta/dss_config.yml, docs/automated_formatting]
---
```

### 2. Explicit Backlinks Section
Each file should include a "Referenced By" section at the end:

```markdown
## Referenced By

- [meta/scripts/sync_dss_mdc.py](mdc:meta/scripts/sync_dss_mdc.py) - Used as source file for Cursor rule generation
- [INDEX.md](mdc:INDEX.md) - Listed in file tree overview
- [docs/automated_formatting](mdc:docs/automated_formatting) - Referenced in automation documentation
```

## Backlink Maintenance Guidelines

### For the Assistant
1. **Update During Renaming**: When renaming a file, update all backlinks that reference it
2. **Add When Creating References**: When adding a reference to a file, also add a backlink in the referenced file
3. **Verify Bidirectionality**: Ensure that if file A references file B, file B includes a backlink to file A
4. **Include Context**: Add a brief description of how the file is used or referenced
5. **Format Consistently**: Use the Markdown link format `[filename](mdc:path/to/file)` for all backlinks

## Best Practices
1. **Prioritize Important References**: Focus on substantive dependencies
2. **Group Related Backlinks**: When a file has many backlinks, group them by category
3. **Update Backlinks Proactively**: Add backlinks immediately when creating new references
4. **Verify During Review**: Check for backlink consistency during code review
5. **Consider Automation**: Implement automated backlink generation where possible

## Integration with DSS Workflows
Backlink maintenance should be integrated into:
1. **File Creation**: Add backlink placeholders when creating new files
2. **Documentation Updates**: Verify and update backlinks when updating documentation
3. **Refactoring**: Ensure backlinks are updated when moving or renaming files
4. **Code Review**: Include backlink verification in code review checklists




