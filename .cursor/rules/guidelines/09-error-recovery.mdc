---
alwaysApply: true
---
``` yaml
---
tags: [Error Recovery, Self Correction, Debugging, Quality Assurance]
provides: [Error Detection, Self Correction Protocol, Recovery Procedures]
requires: [DSS Core Structure and Concepts, Workflow Selection Logic]
---
```

# Error Recovery Process

## Common Error Categories

### 1. Workflow Execution Errors

| Error Type | Description | Common Causes |
|------------|-------------|---------------|
| **Workflow Selection** | Applying the wrong workflow to a task | Misunderstanding task complexity, insufficient context gathering |
| **Step Omission** | Skipping required steps in a workflow | Distraction, context switching, urgency |
| **Sequence Error** | Performing workflow steps in the wrong order | Misjudging dependencies, optimizing prematurely |
| **Incomplete Execution** | Stopping a workflow before completion | Reaching token limits, encountering unexpected blockers |

### 2. Tool Usage Errors

| Error Type | Description | Common Causes |
|------------|-------------|---------------|
| **Wrong Tool** | Using an inappropriate tool for the task | Misunderstanding tool purpose, habit |
| **Parameter Error** | Providing incorrect parameters to a tool | Typos, misunderstanding requirements |
| **Tool Failure** | Tool execution fails despite correct usage | External system limitations, permissions issues |
| **Output Misinterpretation** | Misunderstanding the output of a tool | Incomplete analysis, assumption errors |

### 3. Content Generation Errors

| Error Type | Description | Common Causes |
|------------|-------------|---------------|
| **Style Inconsistency** | Generated content doesn't match project style | Insufficient context, overlooking style guides |
| **Factual Error** | Generating incorrect information | Misremembering, reasoning errors |
| **Incomplete Content** | Generating partial or truncated content | Token limitations, planning errors |
| **Format Error** | Incorrect format for generated content | Misunderstanding requirements, template errors |

### 4. Documentation Errors

| Error Type | Description | Common Causes |
|------------|-------------|---------------|
| **Missing Frontmatter** | Failing to include required frontmatter | Oversight, workflow error |
| **Link Errors** | Creating broken or incorrect links | Typos, incorrect path understanding |
| **Status Tracking** | Incorrect status indicators or tracking | Oversight, confusion about status definitions |
| **Metadata Errors** | Incorrect tags or metadata | Misunderstanding tag conventions |

## Error Detection Guidelines

### Active Detection Methods

1. **Post-Action Verification**:
   - After tool calls, explicitly verify the output matches expectations
   - Check that file modifications achieved the intended result
   - Verify that new content follows required formats and conventions

2. **Consistency Checks**:
   - Compare generated content against project style guides and conventions
   - Verify that frontmatter follows patterns in similar files
   - Ensure status tracking follows established systems

3. **Workflow Checkpoint Validation**:
   - At key points in workflows, verify that all required steps so far have been completed
   - Confirm that the appropriate workflow is still being applied
   - Check for any skipped or incomplete steps

### Passive Detection Methods

1. **User Feedback Recognition**:
   - Interpret explicit user corrections as indicators of errors
   - Recognize implicit feedback in follow-up requests
   - Pay attention to clarifying questions that may indicate confusion

2. **Unexpected Results Recognition**:
   - Be alert to tool outputs that don't match expectations
   - Note when file contents differ significantly from anticipated structure
   - Identify when tasks take significantly longer than estimated

## Self-Correction Protocol

When an error is detected, follow these steps:

### 1. Acknowledge the Error

- Explicitly identify what went wrong
- Be specific about the nature of the error
- Reference the relevant guideline or convention that was not followed

### 2. Assess Impact

- Determine the consequences of the error
- Identify any cascading effects
- Prioritize correction based on severity

### 3. Plan Correction

- Outline specific steps to correct the error
- Consider the most efficient approach
- Ensure the correction plan won't introduce new errors

### 4. Execute Correction

- Implement the correction plan
- Document changes made
- Update status according to established tracking systems

### 5. Verify Correction

- Confirm the error has been fully resolved
- Check that no new issues were introduced
- Update documentation to reflect current state

### 6. Implement Prevention

- Identify how to prevent similar errors in the future
- Update guidelines if needed
- Create a mental note for future operations
